{"version":3,"sources":["api.ts","components/PeoplePage/PeoplePageTitle.tsx","utils/searchHelper.ts","components/PeopleFilters.tsx","components/PeoplePage/PeopleFiltersColumn.tsx","components/Loader/Loader.tsx","components/PeopleTable.tsx","components/PeoplePage/LoadingError.tsx","components/PeoplePage/SearchError.tsx","components/PeoplePage/PeopleTableColumn.tsx","components/PeoplePage/PeoplePage.tsx","components/PeoplePage/auxObject.ts","components/Navbar.tsx","components/HomePage.tsx","App.tsx","index.tsx"],"names":["API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePageTitle","className","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","PeopleFilters","useSearchParams","searchParams","setSearchParams","checkForSelected","century","getAll","includes","toggleCenturies","params","filter","item","param","classNames","has","type","onClick","get","updatedParams","sex","placeholder","onChange","event","target","query","currentTarget","textContent","i","href","sortMethod","checkForSort","PeopleFiltersColumn","loading","Loader","PeopleTable","people","peopleToDisplay","checkForSortMethod","sortingBy","checkForSortDescending","slice","length","sort","person1","person2","name","localeCompare","born","died","map","person","to","pathname","slug","search","motherName","fatherName","father","LoadingError","SearchError","PeopleTableColumn","error","noPeopleOnServer","searchError","centuries","centuriesPar","queryPar","sexPar","PeoplePage","useState","setPeople","setLoading","setError","setNoPeopleOnServer","setSearchError","setPeopleToDisplay","useEffect","getPeople","catch","finally","filteredPeople","toLowerCase","checkTargetObjectHasQuery","targetObject","targetField","queryParameter","String","checkedName","checkedFatherName","personBorn","personBornCentury","Number","getNavLinkClassName","isActive","Navbar","role","HomePage","App","path","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.10c3926a.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\n\nexport const PeoplePageTitle: React.FC = () => {\n  return <h1 className=\"title\">People Page</h1>;\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part.toString());\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const checkForSort = () => {\n    const sortMethod = searchParams.get('sort');\n\n    if (searchParams.has('sort') && searchParams.has('order')) {\n      return `?sort=${sortMethod}&order=${searchParams.get('order')}`;\n    }\n\n    if (searchParams.has('sort')) {\n      return `?sort=${sortMethod}`;\n    }\n\n    return '';\n  };\n\n  const checkForSelected = (century: string) => {\n    const selectedCenturies = searchParams.getAll('centuries');\n\n    return selectedCenturies.includes(century);\n  };\n\n  const toggleCenturies = (century: string) => {\n    const params = new URLSearchParams(searchParams);\n\n    if (params.getAll('centuries').includes(century)) {\n      const newParams = params.getAll('centuries').filter(item => {\n        return item !== century;\n      });\n\n      params.delete('centuries');\n      newParams.forEach((param) => {\n        params.append('centuries', param);\n      });\n    } else {\n      params.append('centuries', century);\n    }\n\n    setSearchParams(params);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <button\n          className={classNames('mr-1 button', {\n            'is-info': !searchParams.has('sex'),\n          })}\n          type=\"button\"\n          onClick={() => {\n            const params = new URLSearchParams(searchParams);\n\n            params.delete('sex');\n            setSearchParams(params);\n          }}\n        >\n          All\n        </button>\n        <button\n          className={classNames('mr-1 button', {\n            'is-info': searchParams.get('sex') === 'm',\n          })}\n          type=\"button\"\n          onClick={() => {\n            const params = new URLSearchParams(searchParams);\n            const updatedParams = getSearchWith(params, { sex: 'm' });\n\n            setSearchParams(updatedParams);\n          }}\n        >\n          Male\n        </button>\n        <button\n          className={classNames('button', {\n            'is-info': searchParams.get('sex') === 'f',\n          })}\n          type=\"button\"\n          onClick={() => {\n            const params = new URLSearchParams(searchParams);\n            const updatedParams = getSearchWith(params, { sex: 'f' });\n\n            setSearchParams(updatedParams);\n          }}\n        >\n          Female\n        </button>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={searchParams.get('query') || ''}\n            onChange={(event) => {\n              const params = new URLSearchParams(searchParams);\n\n              params.set('query', event.target.value);\n\n              if (event.target.value === '') {\n                setSearchParams(getSearchWith(params, {\n                  query: null,\n                }));\n\n                return;\n              }\n\n              setSearchParams(getSearchWith(params, {\n                query: event.target.value,\n              }));\n            }}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            <button\n              data-cy=\"century\"\n              className={classNames('button mr-1', {\n                'is-info': checkForSelected('16'),\n              })}\n              type=\"button\"\n              onClick={(event) => {\n                toggleCenturies(event.currentTarget.textContent || '');\n              }}\n            >\n              16\n            </button>\n\n            <button\n              data-cy=\"century\"\n              className={classNames('button mr-1', {\n                'is-info': checkForSelected('17'),\n              })}\n              type=\"button\"\n              onClick={(event) => {\n                toggleCenturies(event.currentTarget.textContent || '');\n              }}\n            >\n              17\n            </button>\n\n            <button\n              data-cy=\"century\"\n              className={classNames('button mr-1', {\n                'is-info': checkForSelected('18'),\n              })}\n              type=\"button\"\n              onClick={(event) => {\n                toggleCenturies(event.currentTarget.textContent || '');\n              }}\n            >\n              18\n            </button>\n\n            <button\n              data-cy=\"century\"\n              className={classNames('button mr-1', {\n                'is-info': checkForSelected('19'),\n              })}\n              type=\"button\"\n              onClick={(event) => {\n                toggleCenturies(event.currentTarget.textContent || '');\n              }}\n            >\n              19\n            </button>\n\n            <button\n              data-cy=\"century\"\n              className={classNames('button mr-1', {\n                'is-info': checkForSelected('20'),\n              })}\n              type=\"button\"\n              onClick={(event) => {\n                toggleCenturies(event.currentTarget.textContent || '');\n              }}\n            >\n              20\n            </button>\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <button\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              type=\"button\"\n              onClick={() => {\n                const params = new URLSearchParams(searchParams);\n\n                params.delete('centuries');\n                // eslint-disable-next-line no-plusplus\n                for (let i = 16; i <= 20; i++) {\n                  params.append('centuries', `${i}`);\n                }\n\n                setSearchParams(params);\n              }}\n            >\n              All\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href={`#/people${checkForSort()}`}\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { PeopleFilters } from '../PeopleFilters';\n\ntype Props = {\n  loading: boolean;\n};\n\nexport const PeopleFiltersColumn: React.FC<Props> = ({ loading }) => {\n  return (\n    <div className=\"column is-7-tablet is-narrow-desktop\">\n      {!loading && <PeopleFilters />}\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { useSearchParams, Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  peopleToDisplay: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ peopleToDisplay: people }) => {\n  const [searchParams] = useSearchParams();\n\n  const checkForSortMethod = (sortingBy: string) => {\n    const sortMethod = searchParams.get('sort');\n\n    if (sortMethod !== sortingBy) {\n      return 'fa-sort';\n    }\n\n    if (searchParams.has('order') && sortMethod === sortingBy) {\n      return 'fa-sort-down';\n    }\n\n    if (sortMethod === sortingBy) {\n      return 'fa-sort-up';\n    }\n\n    return '';\n  };\n\n  const checkForSortDescending = (sortingBy: string) => {\n    const params = new URLSearchParams(searchParams);\n\n    const sortMethod = params.get('sort');\n\n    if (sortMethod !== sortingBy) {\n      params.delete('sort');\n      params.delete('order');\n    }\n\n    if (params.has('order') && sortMethod === sortingBy) {\n      params.delete('sort');\n      params.delete('order');\n    }\n\n    if (sortMethod === sortingBy && !params.has('order')) {\n      params.set('order', 'desc');\n    } else {\n      params.set('sort', sortingBy);\n    }\n\n    if (params.has('order') && !params.has('sort')) {\n      params.delete('order');\n    }\n\n    if (params.toString()) {\n      return `?${params.toString()}`;\n    }\n\n    return params.toString();\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <a href={`#/people${checkForSortDescending('name')}`}>\n                <span className=\"icon\">\n                  <i className={`fas ${checkForSortMethod('name')}`} />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <a href={`#/people${checkForSortDescending('sex')}`}>\n                <span className=\"icon\">\n                  <i className={`fas ${checkForSortMethod('sex')}`} />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <a href={`#/people${checkForSortDescending('born')}`}>\n                <span className=\"icon\">\n                  <i className={`fas ${checkForSortMethod('born')}`} />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <a href={`#/people${checkForSortDescending('died')}`}>\n                <span className=\"icon\">\n                  <i className={`fas ${checkForSortMethod('died')}`} />\n                </span>\n              </a>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {[...people.slice(0, people.length).sort((person1, person2): number => {\n          if (searchParams.has('order')) {\n            switch (searchParams.get('sort')) {\n              case 'name':\n                return person2.name.localeCompare(person1.name);\n\n              case 'sex':\n                return person2.sex.localeCompare(person1.sex);\n\n              case 'born':\n                return person2.born - person1.born;\n\n              case 'died':\n                return person2.died - person1.died;\n\n              default:\n                return 0;\n            }\n          }\n\n          switch (searchParams.get('sort')) {\n            case 'name':\n              return person1.name.localeCompare(person2.name);\n\n            case 'sex':\n              return person1.sex.localeCompare(person2.sex);\n\n            case 'born':\n              return person1.born - person2.born;\n\n            case 'died':\n              return person1.died - person2.died;\n\n            default:\n              return 0;\n          }\n        })].map(person => (\n          <tr data-cy=\"person\" key={person.slug}>\n            <td>\n              <Link\n                to={{\n                  pathname: `/people/${person.slug}`,\n                  search: searchParams.toString(),\n                }}\n                className={person.sex === 'f' ? 'has-text-danger' : ''}\n              >\n                {person.name}\n              </Link>\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td\n              className={person.sex === 'f' ? 'has-text-danger' : ''}\n            >\n              {person.motherName ? person.motherName : '-'}\n            </td>\n            <td>\n              {/* eslint-disable-next-line no-nested-ternary */}\n              {person.fatherName ? (\n                person.father?.slug ? (\n                  <Link\n                    to={{\n                      pathname: `/people/${person.father.slug}`,\n                      search: searchParams.toString(),\n                    }}\n                  >\n                    {person.fatherName}\n                  </Link>\n                ) : person.fatherName\n              ) : '-'}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\n\nexport const LoadingError: React.FC = () => {\n  return <p data-cy=\"peopleLoadingError\">Something went wrong</p>;\n};\n","import React from 'react';\n\nexport const SearchError: React.FC = () => {\n  return <p>There are no people matching the current search criteria</p>;\n};\n","import React from 'react';\n\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\nimport { LoadingError } from './LoadingError';\nimport { SearchError } from './SearchError';\nimport { Person } from '../../types';\n\ntype Props = {\n  loading: boolean,\n  error: boolean,\n  noPeopleOnServer: boolean,\n  searchError: boolean,\n  peopleToDisplay: Person[],\n};\n\nexport const PeopleTableColumn: React.FC<Props> = ({\n  loading,\n  error,\n  noPeopleOnServer,\n  searchError,\n  peopleToDisplay,\n}) => {\n  return (\n    <div className=\"column\">\n      <div className=\"box table-container\">\n        {loading && <Loader />}\n\n        {error && <LoadingError />}\n\n        {noPeopleOnServer && (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        )}\n\n        {!loading && <PeopleTable {...{ peopleToDisplay }} />}\n        {searchError && <SearchError />}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\n\nimport { PeoplePageTitle } from './PeoplePageTitle';\nimport { PeopleFiltersColumn } from './PeopleFiltersColumn';\nimport { PeopleTableColumn } from './PeopleTableColumn';\nimport { aux } from './auxObject';\n\nconst { // destructure of the impoted file\n  searchParameters: {\n    centuries: centuriesPar,\n    query: queryPar,\n    sex: sexPar,\n  },\n} = aux;\n\ninterface CheckTargetObjectHasQueryProps {\n  targetObject: Person,\n  targetField: keyof Person,\n  query: string,\n}\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [noPeopleOnServer, setNoPeopleOnServer] = useState(false);\n\n  const [searchError, setSearchError] = useState(false);\n\n  const [peopleToDisplay, setPeopleToDisplay] = useState<Person[]>([]);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    setLoading(true);\n    getPeople()\n      .then(response => {\n        setPeople(response);\n\n        if (!response.length) {\n          setNoPeopleOnServer(true);\n        }\n      })\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => { // filtering people\n    if (!people.length) {\n      return;\n    }\n\n    let filteredPeople = people;\n\n    if (searchParams.has(queryPar)) {\n      const query = searchParams.get(queryPar)?.toLowerCase() || '';\n\n      const checkTargetObjectHasQuery = ({\n        targetObject,\n        targetField,\n        query: queryParameter,\n      }: CheckTargetObjectHasQueryProps) => {\n        return String(targetObject[targetField])\n          ?.toLowerCase()\n          .includes(queryParameter);\n      };\n\n      const filterCallback = (person: Person) => {\n        const checkedName = checkTargetObjectHasQuery({\n          query,\n          targetField: 'name',\n          targetObject: person,\n        });\n\n        const checkedFatherName = checkTargetObjectHasQuery({\n          query,\n          targetField: 'fatherName',\n          targetObject: person,\n        });\n\n        const checkedMotherName = checkTargetObjectHasQuery({\n          query,\n          targetField: 'motherName',\n          targetObject: person,\n        });\n\n        return checkedMotherName || checkedFatherName || checkedName;\n      };\n\n      filteredPeople = filteredPeople.filter(filterCallback);\n    }\n\n    if (searchParams.has(sexPar)) {\n      filteredPeople = filteredPeople.filter((person) => {\n        const { sex } = person;\n        const sexSearchParamValue = searchParams.get(sexPar);\n\n        return sex === sexSearchParamValue;\n      });\n    }\n\n    if (searchParams.has(centuriesPar)) {\n      const centuries = searchParams.getAll(centuriesPar);\n\n      filteredPeople = filteredPeople.filter(person => {\n        const personBorn = person.born.toString();\n        const firstTwoNumbersOfPersonBornYear = Number(personBorn.slice(0, 2));\n        const personBornCentury = firstTwoNumbersOfPersonBornYear + 1;\n\n        return centuries.includes(personBornCentury.toString());\n      });\n    }\n\n    setSearchError(!filteredPeople.length);\n    setPeopleToDisplay(filteredPeople);\n  }, [searchParams, people]);\n\n  return (\n    <>\n      <PeoplePageTitle />\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n\n          <PeopleFiltersColumn loading={loading} />\n\n          <PeopleTableColumn\n            loading={loading}\n            error={error}\n            searchError={searchError}\n            noPeopleOnServer={noPeopleOnServer}\n            {...{ peopleToDisplay }}\n          />\n\n        </div>\n      </div>\n    </>\n  );\n};\n","export const aux = { // is the separated file\n  searchParameters: {\n    sex: 'sex',\n    query: 'query',\n    centuries: 'centuries',\n  },\n};\n","/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport { NavLink, useSearchParams } from 'react-router-dom';\n\nconst getNavLinkClassName = ({ isActive }: { isActive: boolean }) => {\n  const isActiveClassName = isActive\n    ? 'has-background-grey-lighter'\n    : '';\n\n  return `navbar-item ${isActiveClassName}`;\n};\n\nexport const Navbar = () => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getNavLinkClassName}\n          >\n            Home\n          </NavLink>\n          <NavLink\n            to={{\n              pathname: '/people',\n              search: searchParams.toString(),\n            }}\n            className={getNavLinkClassName}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">\n      Hi! Its my application,\n      where server loads people, and show it like a table.\n    </h1>\n  );\n};\n","/* eslint-disable max-len */\nimport { Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport { HomePage } from './components/HomePage';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n            <Route path=\"/people\" element={<PeoplePage />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}